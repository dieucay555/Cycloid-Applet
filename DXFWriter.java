import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import javax.swing.JOptionPane;

/**
 * A DXF file writer for Cycloid applet
 */
class DXFWriter {
    private final PrintWriter writer; // this will never change for each instance

    /**
     * Handles creating DXF file from cycloid/catenary user specified.
     *
     * @param file filename the user specified
     */
    public DXFWriter(File file) throws IOException {
        writer = new PrintWriter(new BufferedWriter(new FileWriter(file)));
    }

    /**
     * Prints header for the DXF file being constructed.
     */
    public void writeHeader() {
        writer.printf("0\nSECTION\n");
        writer.printf("2\nHeader\n");
        writer.printf("0\nENDSEC\n");
        writer.printf("999\nGenerated by DXF class of Cycloid Applet\n");
        writer.printf("0\nSECTION\n");
        writer.printf("2\nENTITIES\n");
        writer.flush();
    }

    /**
     * Prints trailer for the DXF file being constructed.
     *
     */
    public void writeTrailer() {
        writer.printf("0\nENDSEC\n");
        writer.printf("0\nEOF\n");
        writer.flush();
    }

    /**
     * Closes writer used after done.
     */
    public void closeFile() {
        try {
            writer.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                e.getMessage(),
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }
    }

    // NOT USED YET
    private void write2DLine(double x1, double y1, double x2, double y2) {
        writer.printf("0\nLINE\n");
        writer.printf("8\n0\n");
        writer.printf("10\n%9.7f\n",x1);
        writer.printf("20\n%9.7f\n",y1);
        writer.printf("11\n%9.7f\n",x2);
        writer.printf("21\n%9.7f\n",y2);
        writer.flush();
    }

    /**
     * Writes 2D polyline's coordinates to DXF file.
     *
     * @param points points with X/Y coords representing cycloid/catenary
     */
    public void write2DPolyLine (final Points points) {
        writer.printf("0\nPOLYLINE\n");
        writer.printf("8\n0\n");
        writer.printf("66\n1\n");
        writer.printf("10\n0.000000\n");
        writer.printf("20\n0.000000\n");
        for (Point point : points) {
            writer.printf("0\nVERTEX\n");
            writer.printf("8\n0\n");
            writer.printf("10\n%9.7f\n", point.X);
            writer.printf("20\n%9.7f\n", point.Y);
        }
        writer.printf("0\nSEQEND\n");
        writer.printf("8\n0\n");
        writer.flush();
    }
}
